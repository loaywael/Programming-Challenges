#
# Author: Loay Wael
#
# LinkedList Data Structure
#
# This is the Makefile for the program
#

# Program Name: 
PROG = List

# Compiler and Flags:
CXX = g++ -std=c++11
CFLAGS = -Wall -c
LFLAGS = -Wall -o

BIN = .
SRC = ../src
OBJS = main.o LinkedList.o

all: $(PROG) tar

# Building stage
$(BIN)/$(PROG): $(BIN)/$(OBJS)
	@echo "-----------------------------------"
	@echo "Creating the executable for the app"
	@echo "-----------------------------------"
	$(CXX) $(LFLAGS) $(PROG) $(BIN)/$(OBJS)
	
%.o : %.cpp
	@echo "-----------------------------------"
	@echo "Compiling the file $<"
	@echo "-----------------------------------"
	$(CXX) $(CFLAGS) $<
	
# Cleaning stage
clean:
	@echo "-----------------------------------"
	@echo "Cleaning unnecessary files"
	@echo "-----------------------------------"
	rm *.o

tar:
	@echo "-----------------------------------"
	@echo "Packing source code into .tar file"
	@echo "-----------------------------------"
	tar cfv makeList.tar makefile $(SRC)/*.cpp $(SRC)/*.hpp
	
		
# Dependancies
LinkedList.o : $(SRC)/LinkedList.cpp
main.o 		 : $(SRC)/main.cpp


# ==============================================

#####################################
# 
#####################################

CXX = g++
SRC_LOC = ../src

#LIBS_LOC = ../lib
LIBS = -lm

CFLAGS = -I$(SRC_LOC) -Wall -c -o
LFALGS = -I$(SRC_LOC) $(LIBS) -Wall -o

_DEPS = LinkedList.hpp
DEPS = $(patsubst %,$(SRC_LOC)/%,$(_DEPS))

OBJ_LOC = ./obj
_OBJS = main.o LinkedList.o
OBJS = $(patsubst %,$(OBJ_LOC)/%,$(_OBJS))

$(OBJ_LOC)/%.o: $(SRC_LOC)/%.cpp $(DEPS)
	$(CXX) $(CFLAGS) $@ $< 

#Program Name
PROG = run

# All Target
all : $(PROG) 


$(PROG) : $(OBJS)
	$(CXX) $(LFALGS) $@ $^

.PHONY : clean

clean :
	rm $(OBJ_LOC)/*.o *~ core

#############################################################

XE = hellomake

SRC_DIR = src
OBJ_DIR = obj

SRC = $(wildcard $(SRC_DIR)/*.c)
OBJ = $(SRC:$(SRC_DIR)/%.c=$(OBJ_DIR)/%.o)

CPPFLAGS += -Iinclude
CFLAGS += -Wall
LDFLAGS += -Llib
LDLIBS += -lm

.PHONY: all clean

all: $(EXE)

$(EXE): $(OBJ)
    $(CC) $(LDFLAGS) $^ $(LDLIBS) -o $@

$(OBJ_DIR)/%.o: $(SRC_DIR)/%.c
    $(CC) $(CPPFLAGS) $(CFLAGS) -c $< -o $@

clean:
    $(RM) $(OBJ)
    
###################################################################
SHELL := /bin/sh

# following so could define executable name on command line
# using the '-D' parameter
#ifndef $(NAME)
    NAME := hellomake
#endif

# use ':=' so macros only evaluated once


MAKE    :=  /usr/bin/make
CC      :=  /usr/bin/gcc

CFLAGS  := -g -Wall -Wextra -pedantic
LFLAGS  :=

ODIR    := obj
IDIR    := ../include
LIBS    :=
LIBPATH := ../lib

DEPS    := $(wildcard $(IDIR)/*.h)
SRCS    := $(wildcard *.c)
OBJS    := $(SRCS:.c=.o)

.PHONY: all
all: $(NAME) $(OBJS)

$(ODIR)/%.o: %.c $(DEPS)
    $(CC) $(CFLAGS) -c -o $@ $< -I$(DEPS)

$(NAME): $(OBJS)
    $(CC) $(LFLAGS) -o $@ $^ -L$(LIBPATH) -l$(LIBS)

.PHONY: clean
clean:
    rm -f $(ODIR)/*.o
    rm -f $(NAME)


however, in your proposed project,
not every source file needs every header file
so should use either gcc or sed to generate the dependency files
then use makefile rules similar to the following,
which may need a little 'tweaking' for your project
because the include files are not in the same directory
as the source files:

DEP := $(SRCS:.c=.d)

#
#create dependency files
#
%.d: %.c 
    # 
    # ========= START $< TO $@ =========
    $(CC) -M $(CPPFLAGS) $< > $@.$$$$;                      \
    sed 's,\($*\)\.o[ :]*,\1.o $@ : ,g' < $@.$$$$ > $@;     \
    rm -f $@.$$$$
    # ========= END $< TO $@ =========

# 
# compile the .c files into .o files using the compiler flags
#
%.o: %.c %.d 
     # 
     # ========= START $< TO $@ =========
     $(CC) $(CCFLAGS) -c $< -o $@ -I$(IDIR) 
     # ========= END $< TO $@ =========
     # 

# include the contents of all the .d files
# note: the .d files contain:
# <filename>.o:<filename>.c plus all the dependencies for that .c file 
# I.E. the #include'd header files
# wrap with ifneg... so will not rebuild *.d files when goal is 'clean'
#
ifneq "$(MAKECMDGOALS)" "clean"
-include $(DEP)
endif



